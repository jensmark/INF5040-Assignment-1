/* This module defines the server interface and the data structures for the Quiz Game. */
module Quiz {

	/* Data structure defining one alternative for a Question */
	valuetype Alternative {
		public char id;
		public string sentence;
	};

	/* Data structure defining a question composed of id, sentence and alternatives */
	valuetype Question {
        typedef sequence<Alternative> AlternativeSeq;
		public long id;
		public string sentence;
		public AlternativeSeq alternatives;
	};
	
	/* Data structure defining a complete question, which extends the Question structure
	   adding the correct alternatives for the question. */
	valuetype CompleteQuestion : Question {
        typedef sequence<char> CharSeq;
		public CharSeq correctAlternatives;
	};

	/* Interface for the Quiz Game server object. This interface provides the methods that
	   can be used by clients to play the game.*/
	interface QuizServer {
	
		/* Exception type that can be generated by the game server object. */
		exception QuizException {
        	string reason;
    	};

		/* auxiliary definition of sequence type for alternatives */
		typedef sequence<char> alternativesIds;

		/* Method for the creation of a new question on the server object. The question
		   object should be created on the client and sent to the server using this method.
		   On the server, the question is persisted on the memory or disk, so it can be
		   returned to the clients on future call. The submitted question should be complete,
		   containing the correct answers. It returns the question id of the created question.
		   This method should allow the client to select the question id, in case the id is
		   already taken it should automatically assign an id to the question. Note that a
		   question may have more than one correct alternatives. */
		long newQuestion(in CompleteQuestion question) 
			raises (QuizException);
	
		/* Returns a question to the client selected randomly form the set of questions stored at
		   the server. A Question object that does not contains the correct answers is returned. */
		boolean getRandomQuestion(out Question randomQuestion) 
			raises (QuizException);
	
		/* The client can submit answers to one of the questions that he knows the id. The server
		   will check the answer and return true if it is correct of false if not. The out correct
		   parameter should be filled with the write answer. */
		boolean answerQuestion(in long questionId, in alternativesIds answer, out alternativesIds correct) 
			raises (QuizException);
	
		/* Removes a question that has the specified id from the server. */
		long removeQuestion(in long questionId) 
			raises (QuizException);
 
	};
	
};
