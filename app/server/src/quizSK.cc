// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "quiz.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



// valuetype Alternative

void
Quiz::Alternative_Helper::add_ref(::Quiz::Alternative* _v)
{
  if (_v) _v->_add_ref();
}

void
Quiz::Alternative_Helper::remove_ref(::Quiz::Alternative* _v)
{
  if (_v) _v->_remove_ref();
}

Quiz::Alternative*
Quiz::Alternative::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (Quiz::Alternative*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* Quiz::Alternative::_PD_repoId = "IDL:Quiz/Alternative:1.0";

const char*
Quiz::Alternative::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
Quiz::Alternative::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 2181730396U;
  return _PD_repoId;
}

::CORBA::Boolean
Quiz::Alternative::_NP_custom() const
{
  return 0;
}

void*
Quiz::Alternative::_ptrToValue(const char* _id)
{
  if (_id == ::Quiz::Alternative::_PD_repoId)
    return (::Quiz::Alternative*) this;
  
  

  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::Alternative::_PD_repoId))
    return (::Quiz::Alternative*) this;
  
  

  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
Quiz::Alternative::_NP_marshal(Quiz::Alternative* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, Quiz::Alternative::_PD_repoId, _0s);
}

void
Quiz::Alternative_Helper::marshal(::Quiz::Alternative* _v, cdrStream& _0s)
{
  Quiz::Alternative::_NP_marshal(_v,_0s);
}

Quiz::Alternative*
Quiz::Alternative::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(Quiz::Alternative::_PD_repoId,
						    2181730396U, 0, _0s);
  Quiz::Alternative* _d = Quiz::Alternative::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           Quiz::Alternative::_PD_repoId,
           2181730396U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = Quiz::Alternative::_downcast(_b);
  }
  return _d;
}

Quiz::Alternative*
Quiz::Alternative_Helper::unmarshal(cdrStream& _0s)
{
  return Quiz::Alternative::_NP_unmarshal(_0s);
}

void
Quiz::Alternative::_PR_marshal_state(cdrStream& _0s) const
{
  _0s.marshalChar(id());

  _0s.marshalString(sentence());


}

void
Quiz::Alternative::_PR_unmarshal_state(cdrStream& _0s)
{
  ::CORBA::Char _id;
  _id = _0s.unmarshalChar();
  id(_id);


  char* _sentence;
  _sentence = _0s.unmarshalString();
  sentence(_sentence);



}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
Quiz::Alternative*
#else
::CORBA::ValueBase*
#endif
Quiz::Alternative::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 2181730396U);
  Quiz::Alternative* _v = Quiz::Alternative::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
Quiz::Alternative::_PR_copy_state(Quiz::Alternative* _v)
{
  id(_v->id());

  sentence(_v->sentence());


}


Quiz::Alternative::Alternative()  {}
Quiz::Alternative::~Alternative() {}

OBV_Quiz::Alternative::Alternative() {}
OBV_Quiz::Alternative::~Alternative() {}

OBV_Quiz::Alternative::Alternative(::CORBA::Char _id, const char* _sentence)

{
  _pd_id = _id;

  _pd_sentence = _sentence;


}

const _omni_ValueIds*
Quiz::Alternative::_NP_truncatableIds() const
{
  return 0;
}

::CORBA::Char
OBV_Quiz::Alternative::id() const
{
  return _pd_id;
}

void
OBV_Quiz::Alternative::id(::CORBA::Char _value)
{
  _pd_id = _value;
}


const char*
OBV_Quiz::Alternative::sentence() const
{
  return (const char*)_pd_sentence;
}

void
OBV_Quiz::Alternative::sentence(char* _value)
{
  _pd_sentence = _value;
}

void
OBV_Quiz::Alternative::sentence(const char* _value)
{
  _pd_sentence = _value;
}

void
OBV_Quiz::Alternative::sentence(const ::CORBA::String_var& _value)
{
  _pd_sentence = _value;
}


Quiz::Alternative_init::Alternative_init()  {}
Quiz::Alternative_init::~Alternative_init() {}

Quiz::Alternative_init*
Quiz::Alternative_init::_downcast(::CORBA::ValueFactory _v)
{
  return _v ? (::Quiz::Alternative_init*)_v->_ptrToFactory(::Quiz::Alternative::_PD_repoId) : 0;
}

void*
Quiz::Alternative_init::_ptrToFactory(const char* _id)
{
  if (_id == ::Quiz::Alternative::_PD_repoId)
    return (::Quiz::Alternative_init*) this;
  
  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueFactoryBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::Alternative::_PD_repoId))
    return (::Quiz::Alternative_init*) this;
  
  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueFactoryBase*) this;

  return 0;
}

::CORBA::ValueBase*
Quiz::Alternative_init::create_for_unmarshal()
{
  return new OBV_Quiz::Alternative();
}

// valuetype Question

void
Quiz::Question_Helper::add_ref(::Quiz::Question* _v)
{
  if (_v) _v->_add_ref();
}

void
Quiz::Question_Helper::remove_ref(::Quiz::Question* _v)
{
  if (_v) _v->_remove_ref();
}

Quiz::Question*
Quiz::Question::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (Quiz::Question*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* Quiz::Question::_PD_repoId = "IDL:Quiz/Question:1.0";

const char*
Quiz::Question::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
Quiz::Question::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 1991747407U;
  return _PD_repoId;
}

::CORBA::Boolean
Quiz::Question::_NP_custom() const
{
  return 0;
}

void*
Quiz::Question::_ptrToValue(const char* _id)
{
  if (_id == ::Quiz::Question::_PD_repoId)
    return (::Quiz::Question*) this;
  
  

  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::Question::_PD_repoId))
    return (::Quiz::Question*) this;
  
  

  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
Quiz::Question::_NP_marshal(Quiz::Question* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, Quiz::Question::_PD_repoId, _0s);
}

void
Quiz::Question_Helper::marshal(::Quiz::Question* _v, cdrStream& _0s)
{
  Quiz::Question::_NP_marshal(_v,_0s);
}

Quiz::Question*
Quiz::Question::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(Quiz::Question::_PD_repoId,
						    1991747407U, 0, _0s);
  Quiz::Question* _d = Quiz::Question::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           Quiz::Question::_PD_repoId,
           1991747407U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = Quiz::Question::_downcast(_b);
  }
  return _d;
}

Quiz::Question*
Quiz::Question_Helper::unmarshal(cdrStream& _0s)
{
  return Quiz::Question::_NP_unmarshal(_0s);
}

void
Quiz::Question::_PR_marshal_state(cdrStream& _0s) const
{
  id() >>= _0s;

  _0s.marshalString(sentence());

  alternatives() >>= _0s;


}

void
Quiz::Question::_PR_unmarshal_state(cdrStream& _0s)
{
  ::CORBA::Long _id;
  _id <<= _0s;
  id(_id);


  char* _sentence;
  _sentence = _0s.unmarshalString();
  sentence(_sentence);


  AlternativeSeq& _alternatives = alternatives();
  _alternatives <<= _0s;



}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
Quiz::Question*
#else
::CORBA::ValueBase*
#endif
Quiz::Question::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 1991747407U);
  Quiz::Question* _v = Quiz::Question::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
Quiz::Question::_PR_copy_state(Quiz::Question* _v)
{
  id(_v->id());

  sentence(_v->sentence());

  alternatives(_v->alternatives());


}


Quiz::Question::Question()  {}
Quiz::Question::~Question() {}

OBV_Quiz::Question::Question() {}
OBV_Quiz::Question::~Question() {}

OBV_Quiz::Question::Question(::CORBA::Long _id, const char* _sentence, ::Quiz::Question::AlternativeSeq& _alternatives)

{
  _pd_id = _id;

  _pd_sentence = _sentence;

  _pd_alternatives = _alternatives;


}

const _omni_ValueIds*
Quiz::Question::_NP_truncatableIds() const
{
  return 0;
}

::CORBA::Long
OBV_Quiz::Question::id() const
{
  return _pd_id;
}

void
OBV_Quiz::Question::id(::CORBA::Long _value)
{
  _pd_id = _value;
}


const char*
OBV_Quiz::Question::sentence() const
{
  return (const char*)_pd_sentence;
}

void
OBV_Quiz::Question::sentence(char* _value)
{
  _pd_sentence = _value;
}

void
OBV_Quiz::Question::sentence(const char* _value)
{
  _pd_sentence = _value;
}

void
OBV_Quiz::Question::sentence(const ::CORBA::String_var& _value)
{
  _pd_sentence = _value;
}


const ::Quiz::Question::AlternativeSeq&
OBV_Quiz::Question::alternatives() const
{
  return _pd_alternatives;
}

::Quiz::Question::AlternativeSeq&
OBV_Quiz::Question::alternatives()
{
  return _pd_alternatives;
}

void
OBV_Quiz::Question::alternatives(const ::Quiz::Question::AlternativeSeq& _value)
{
  _pd_alternatives = _value;
}


Quiz::Question_init::Question_init()  {}
Quiz::Question_init::~Question_init() {}

Quiz::Question_init*
Quiz::Question_init::_downcast(::CORBA::ValueFactory _v)
{
  return _v ? (::Quiz::Question_init*)_v->_ptrToFactory(::Quiz::Question::_PD_repoId) : 0;
}

void*
Quiz::Question_init::_ptrToFactory(const char* _id)
{
  if (_id == ::Quiz::Question::_PD_repoId)
    return (::Quiz::Question_init*) this;
  
  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueFactoryBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::Question::_PD_repoId))
    return (::Quiz::Question_init*) this;
  
  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueFactoryBase*) this;

  return 0;
}

::CORBA::ValueBase*
Quiz::Question_init::create_for_unmarshal()
{
  return new OBV_Quiz::Question();
}

// valuetype CompleteQuestion

void
Quiz::CompleteQuestion_Helper::add_ref(::Quiz::CompleteQuestion* _v)
{
  if (_v) _v->_add_ref();
}

void
Quiz::CompleteQuestion_Helper::remove_ref(::Quiz::CompleteQuestion* _v)
{
  if (_v) _v->_remove_ref();
}

Quiz::CompleteQuestion*
Quiz::CompleteQuestion::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (Quiz::CompleteQuestion*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* Quiz::CompleteQuestion::_PD_repoId = "IDL:Quiz/CompleteQuestion:1.0";

const char*
Quiz::CompleteQuestion::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
Quiz::CompleteQuestion::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 3267390723U;
  return _PD_repoId;
}

::CORBA::Boolean
Quiz::CompleteQuestion::_NP_custom() const
{
  return 0;
}

void*
Quiz::CompleteQuestion::_ptrToValue(const char* _id)
{
  if (_id == ::Quiz::CompleteQuestion::_PD_repoId)
    return (::Quiz::CompleteQuestion*) this;
  
  if (_id == ::Quiz::Question::_PD_repoId)
    return (::Quiz::Question*) this;



  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::CompleteQuestion::_PD_repoId))
    return (::Quiz::CompleteQuestion*) this;
  
  if (omni::strMatch(_id, ::Quiz::Question::_PD_repoId))
    return (::Quiz::Question*) this;



  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
Quiz::CompleteQuestion::_NP_marshal(Quiz::CompleteQuestion* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, Quiz::CompleteQuestion::_PD_repoId, _0s);
}

void
Quiz::CompleteQuestion_Helper::marshal(::Quiz::CompleteQuestion* _v, cdrStream& _0s)
{
  Quiz::CompleteQuestion::_NP_marshal(_v,_0s);
}

Quiz::CompleteQuestion*
Quiz::CompleteQuestion::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(Quiz::CompleteQuestion::_PD_repoId,
						    3267390723U, 0, _0s);
  Quiz::CompleteQuestion* _d = Quiz::CompleteQuestion::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           Quiz::CompleteQuestion::_PD_repoId,
           3267390723U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = Quiz::CompleteQuestion::_downcast(_b);
  }
  return _d;
}

Quiz::CompleteQuestion*
Quiz::CompleteQuestion_Helper::unmarshal(cdrStream& _0s)
{
  return Quiz::CompleteQuestion::_NP_unmarshal(_0s);
}

void
Quiz::CompleteQuestion::_PR_marshal_state(cdrStream& _0s) const
{
  ::Quiz::Question::_PR_marshal_state(_0s);
  correctAlternatives() >>= _0s;


}

void
Quiz::CompleteQuestion::_PR_unmarshal_state(cdrStream& _0s)
{
  ::Quiz::Question::_PR_unmarshal_state(_0s);
  CharSeq& _correctAlternatives = correctAlternatives();
  _correctAlternatives <<= _0s;



}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
Quiz::CompleteQuestion*
#else
::CORBA::ValueBase*
#endif
Quiz::CompleteQuestion::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 3267390723U);
  Quiz::CompleteQuestion* _v = Quiz::CompleteQuestion::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
Quiz::CompleteQuestion::_PR_copy_state(Quiz::CompleteQuestion* _v)
{
  ::Quiz::Question::_PR_copy_state(_v);
  correctAlternatives(_v->correctAlternatives());


}


Quiz::CompleteQuestion::CompleteQuestion()  {}
Quiz::CompleteQuestion::~CompleteQuestion() {}

OBV_Quiz::CompleteQuestion::CompleteQuestion() {}
OBV_Quiz::CompleteQuestion::~CompleteQuestion() {}

OBV_Quiz::CompleteQuestion::CompleteQuestion(::CORBA::Long _id, const char* _sentence, ::Quiz::Question::AlternativeSeq& _alternatives, ::Quiz::CompleteQuestion::CharSeq& _correctAlternatives)
  : ::OBV_Quiz::Question(_id, _sentence, _alternatives)
{
  _pd_correctAlternatives = _correctAlternatives;


}

const _omni_ValueIds*
Quiz::CompleteQuestion::_NP_truncatableIds() const
{
  return 0;
}

const ::Quiz::CompleteQuestion::CharSeq&
OBV_Quiz::CompleteQuestion::correctAlternatives() const
{
  return _pd_correctAlternatives;
}

::Quiz::CompleteQuestion::CharSeq&
OBV_Quiz::CompleteQuestion::correctAlternatives()
{
  return _pd_correctAlternatives;
}

void
OBV_Quiz::CompleteQuestion::correctAlternatives(const ::Quiz::CompleteQuestion::CharSeq& _value)
{
  _pd_correctAlternatives = _value;
}


Quiz::CompleteQuestion_init::CompleteQuestion_init()  {}
Quiz::CompleteQuestion_init::~CompleteQuestion_init() {}

Quiz::CompleteQuestion_init*
Quiz::CompleteQuestion_init::_downcast(::CORBA::ValueFactory _v)
{
  return _v ? (::Quiz::CompleteQuestion_init*)_v->_ptrToFactory(::Quiz::CompleteQuestion::_PD_repoId) : 0;
}

void*
Quiz::CompleteQuestion_init::_ptrToFactory(const char* _id)
{
  if (_id == ::Quiz::CompleteQuestion::_PD_repoId)
    return (::Quiz::CompleteQuestion_init*) this;
  
  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueFactoryBase*) this;
  
  if (omni::strMatch(_id, ::Quiz::CompleteQuestion::_PD_repoId))
    return (::Quiz::CompleteQuestion_init*) this;
  
  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueFactoryBase*) this;

  return 0;
}

::CORBA::ValueBase*
Quiz::CompleteQuestion_init::create_for_unmarshal()
{
  return new OBV_Quiz::CompleteQuestion();
}

::CORBA::Exception::insertExceptionToAny Quiz::QuizServer::QuizException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP Quiz::QuizServer::QuizException::insertToAnyFnNCP = 0;

Quiz::QuizServer::QuizException::QuizException(const Quiz::QuizServer::QuizException& _s) : ::CORBA::UserException(_s)
{
  reason = _s.reason;

}

Quiz::QuizServer::QuizException::QuizException(const char* _reason)
{
  pd_insertToAnyFn    = Quiz::QuizServer::QuizException::insertToAnyFn;
  pd_insertToAnyFnNCP = Quiz::QuizServer::QuizException::insertToAnyFnNCP;
  reason = _reason;

}



Quiz::QuizServer::QuizException& Quiz::QuizServer::QuizException::operator=(const Quiz::QuizServer::QuizException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  reason = _s.reason;

  return *this;
}

Quiz::QuizServer::QuizException::~QuizException() {}

void Quiz::QuizServer::QuizException::_raise() const { throw *this; }

const char* Quiz::QuizServer::QuizException::_PD_repoId = "IDL:Quiz/QuizServer/QuizException:1.0";
const char* Quiz::QuizServer::QuizException::_PD_typeId = "Exception/UserException/Quiz::QuizServer::QuizException";

Quiz::QuizServer::QuizException* Quiz::QuizServer::QuizException::_downcast(::CORBA::Exception* _e) {
  return (QuizException*) _NP_is_a(_e, _PD_typeId);
}

const Quiz::QuizServer::QuizException* Quiz::QuizServer::QuizException::_downcast(const ::CORBA::Exception* _e) {
  return (const QuizException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* Quiz::QuizServer::QuizException::_NP_duplicate() const {
  return new QuizException(*this);
}

const char* Quiz::QuizServer::QuizException::_NP_typeId() const {
  return _PD_typeId;
}

const char* Quiz::QuizServer::QuizException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Quiz/QuizServer/QuizException:1.0");
  return _PD_repoId;
}
 
void Quiz::QuizServer::QuizException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
Quiz::QuizServer::QuizException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(reason,0);

}

void
Quiz::QuizServer::QuizException::operator<<= (cdrStream& _n)
{
  reason = _n.unmarshalString(0);

}

Quiz::QuizServer_ptr Quiz::QuizServer_Helper::_nil() {
  return ::Quiz::QuizServer::_nil();
}

::CORBA::Boolean Quiz::QuizServer_Helper::is_nil(::Quiz::QuizServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void Quiz::QuizServer_Helper::release(::Quiz::QuizServer_ptr p) {
  ::CORBA::release(p);
}

void Quiz::QuizServer_Helper::marshalObjRef(::Quiz::QuizServer_ptr obj, cdrStream& s) {
  ::Quiz::QuizServer::_marshalObjRef(obj, s);
}

Quiz::QuizServer_ptr Quiz::QuizServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Quiz::QuizServer::_unmarshalObjRef(s);
}

void Quiz::QuizServer_Helper::duplicate(::Quiz::QuizServer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Quiz::QuizServer_ptr
Quiz::QuizServer::_duplicate(::Quiz::QuizServer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Quiz::QuizServer_ptr
Quiz::QuizServer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Quiz::QuizServer_ptr
Quiz::QuizServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Quiz::QuizServer_ptr
Quiz::QuizServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_QuizServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_QuizServer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_QuizServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Quiz::QuizServer::_PD_repoId = "IDL:Quiz/QuizServer:1.0";


Quiz::_objref_QuizServer::~_objref_QuizServer() {
  
}


Quiz::_objref_QuizServer::_objref_QuizServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Quiz::QuizServer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Quiz::_objref_QuizServer::_ptrToObjRef(const char* id)
{
  if( id == ::Quiz::QuizServer::_PD_repoId )
    return (::Quiz::QuizServer_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Quiz::QuizServer::_PD_repoId) )
    return (::Quiz::QuizServer_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cQuiz_mCompleteQuestion_e_cQuiz_mQuizServer_mQuizException
class _0RL_cd_3656c2fb61659cce_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3656c2fb61659cce_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    containsValues(1);
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quiz::CompleteQuestion_var arg_0_;
  Quiz::CompleteQuestion* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_3656c2fb61659cce_00000000::marshalArguments(cdrStream& _n)
{
  Quiz::CompleteQuestion::_NP_marshal(arg_0,_n);

}

void _0RL_cd_3656c2fb61659cce_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = Quiz::CompleteQuestion::_NP_unmarshal(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_3656c2fb61659cce_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_3656c2fb61659cce_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_3656c2fb61659cce_00000000::_user_exns[] = {
  Quiz::QuizServer::QuizException::_PD_repoId
};

void _0RL_cd_3656c2fb61659cce_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quiz::QuizServer::QuizException::_PD_repoId) ) {
    Quiz::QuizServer::QuizException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_3656c2fb61659cce_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3656c2fb61659cce_00000000* tcd = (_0RL_cd_3656c2fb61659cce_00000000*)cd;
  Quiz::_impl_QuizServer* impl = (Quiz::_impl_QuizServer*) svnt->_ptrToInterface(Quiz::QuizServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->newQuestion(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->newQuestion(tcd->arg_0);
  else {
    try {
      tcd->result = impl->newQuestion(tcd->arg_0);
    }
    catch(Quiz::QuizServer::QuizException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quiz::_objref_QuizServer::newQuestion(::Quiz::CompleteQuestion* question)
{
  _0RL_cd_3656c2fb61659cce_00000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_10000000, "newQuestion", 12);
  _call_desc.arg_0 = question;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_o_cQuiz_mQuestion_e_cQuiz_mQuizServer_mQuizException
class _0RL_cd_3656c2fb61659cce_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3656c2fb61659cce_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    containsValues(1);
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  Quiz::Question_var arg_0;
  ::CORBA::Boolean result;
};

void _0RL_cd_3656c2fb61659cce_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  Quiz::Question::_NP_marshal(arg_0,_n);

}

void _0RL_cd_3656c2fb61659cce_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_0 = Quiz::Question::_NP_unmarshal(_n);

}

const char* const _0RL_cd_3656c2fb61659cce_20000000::_user_exns[] = {
  Quiz::QuizServer::QuizException::_PD_repoId
};

void _0RL_cd_3656c2fb61659cce_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quiz::QuizServer::QuizException::_PD_repoId) ) {
    Quiz::QuizServer::QuizException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_3656c2fb61659cce_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3656c2fb61659cce_20000000* tcd = (_0RL_cd_3656c2fb61659cce_20000000*)cd;
  Quiz::_impl_QuizServer* impl = (Quiz::_impl_QuizServer*) svnt->_ptrToInterface(Quiz::QuizServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->getRandomQuestion(tcd->arg_0.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->getRandomQuestion(tcd->arg_0.out());
  else {
    try {
      tcd->result = impl->getRandomQuestion(tcd->arg_0.out());
    }
    catch(Quiz::QuizServer::QuizException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quiz::_objref_QuizServer::getRandomQuestion(::Quiz::Question_out randomQuestion)
{
  _0RL_cd_3656c2fb61659cce_20000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_30000000, "getRandomQuestion", 18);


  _invoke(_call_desc);
  randomQuestion = _call_desc.arg_0._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_clong_i_cQuiz_mQuizServer_malternativesIds_o_cQuiz_mQuizServer_malternativesIds_e_cQuiz_mQuizServer_mQuizException
class _0RL_cd_3656c2fb61659cce_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3656c2fb61659cce_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  Quiz::QuizServer::alternativesIds_var arg_1_;
  const Quiz::QuizServer::alternativesIds* arg_1;
  Quiz::QuizServer::alternativesIds_var arg_2;
  ::CORBA::Boolean result;
};

void _0RL_cd_3656c2fb61659cce_40000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const Quiz::QuizServer::alternativesIds&) *arg_1 >>= _n;

}

void _0RL_cd_3656c2fb61659cce_40000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;
  arg_1_ = new Quiz::QuizServer::alternativesIds;
  (Quiz::QuizServer::alternativesIds&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_3656c2fb61659cce_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);
  (const Quiz::QuizServer::alternativesIds&) arg_2 >>= _n;

}

void _0RL_cd_3656c2fb61659cce_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();
  arg_2 = new Quiz::QuizServer::alternativesIds;
  (Quiz::QuizServer::alternativesIds&)arg_2 <<= _n;

}

const char* const _0RL_cd_3656c2fb61659cce_40000000::_user_exns[] = {
  Quiz::QuizServer::QuizException::_PD_repoId
};

void _0RL_cd_3656c2fb61659cce_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quiz::QuizServer::QuizException::_PD_repoId) ) {
    Quiz::QuizServer::QuizException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_3656c2fb61659cce_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3656c2fb61659cce_40000000* tcd = (_0RL_cd_3656c2fb61659cce_40000000*)cd;
  Quiz::_impl_QuizServer* impl = (Quiz::_impl_QuizServer*) svnt->_ptrToInterface(Quiz::QuizServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->answerQuestion(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out());
#else
  if (!cd->is_upcall())
    tcd->result = impl->answerQuestion(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out());
  else {
    try {
      tcd->result = impl->answerQuestion(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out());
    }
    catch(Quiz::QuizServer::QuizException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Boolean Quiz::_objref_QuizServer::answerQuestion(::CORBA::Long questionId, const ::Quiz::QuizServer::alternativesIds& answer, ::Quiz::QuizServer::alternativesIds_out correct)
{
  _0RL_cd_3656c2fb61659cce_40000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_50000000, "answerQuestion", 15);
  _call_desc.arg_0 = questionId;
  _call_desc.arg_1 = &(::Quiz::QuizServer::alternativesIds&) answer;

  _invoke(_call_desc);
  correct = _call_desc.arg_2._retn();
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_clong_e_cQuiz_mQuizServer_mQuizException
class _0RL_cd_3656c2fb61659cce_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_3656c2fb61659cce_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_3656c2fb61659cce_60000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_3656c2fb61659cce_60000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_3656c2fb61659cce_60000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_3656c2fb61659cce_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_3656c2fb61659cce_60000000::_user_exns[] = {
  Quiz::QuizServer::QuizException::_PD_repoId
};

void _0RL_cd_3656c2fb61659cce_60000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, Quiz::QuizServer::QuizException::_PD_repoId) ) {
    Quiz::QuizServer::QuizException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_3656c2fb61659cce_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_3656c2fb61659cce_60000000* tcd = (_0RL_cd_3656c2fb61659cce_60000000*)cd;
  Quiz::_impl_QuizServer* impl = (Quiz::_impl_QuizServer*) svnt->_ptrToInterface(Quiz::QuizServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->removeQuestion(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->removeQuestion(tcd->arg_0);
  else {
    try {
      tcd->result = impl->removeQuestion(tcd->arg_0);
    }
    catch(Quiz::QuizServer::QuizException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long Quiz::_objref_QuizServer::removeQuestion(::CORBA::Long questionId)
{
  _0RL_cd_3656c2fb61659cce_60000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_70000000, "removeQuestion", 15);
  _call_desc.arg_0 = questionId;

  _invoke(_call_desc);
  return _call_desc.result;


}
Quiz::_pof_QuizServer::~_pof_QuizServer() {}


omniObjRef*
Quiz::_pof_QuizServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Quiz::_objref_QuizServer(ior, id);
}


::CORBA::Boolean
Quiz::_pof_QuizServer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Quiz::QuizServer::_PD_repoId) )
    return 1;
  
  return 0;
}

const Quiz::_pof_QuizServer _the_pof_Quiz_mQuizServer;

Quiz::_impl_QuizServer::~_impl_QuizServer() {}


::CORBA::Boolean
Quiz::_impl_QuizServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "newQuestion") ) {

    _0RL_cd_3656c2fb61659cce_00000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_10000000, "newQuestion", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getRandomQuestion") ) {

    _0RL_cd_3656c2fb61659cce_20000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_30000000, "getRandomQuestion", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "answerQuestion") ) {

    _0RL_cd_3656c2fb61659cce_40000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_50000000, "answerQuestion", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "removeQuestion") ) {

    _0RL_cd_3656c2fb61659cce_60000000 _call_desc(_0RL_lcfn_3656c2fb61659cce_70000000, "removeQuestion", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Quiz::_impl_QuizServer::_ptrToInterface(const char* id)
{
  if( id == ::Quiz::QuizServer::_PD_repoId )
    return (::Quiz::_impl_QuizServer*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Quiz::QuizServer::_PD_repoId) )
    return (::Quiz::_impl_QuizServer*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Quiz::_impl_QuizServer::_mostDerivedRepoId()
{
  return ::Quiz::QuizServer::_PD_repoId;
}

POA_Quiz::QuizServer::~QuizServer() {}

